假设你想建立一个索引结构，你会用什么数据结构呢

1.散列表  
  优点:插入 O(1)     单个查找 O(1)     
  缺点:范围查找O(N)
  
2.有序数组
  优点:范围查找O(log N)  单个查找O(log N)
  缺点:插入可能是O(N)
  
3.平衡二叉树
  优点:插入 O(log N)     单个查找 O(log N)
  缺点:范围查找需要跑两边
  
4.叶子节点有序存放的平衡二叉树（除叶子节点外只做索引，不做数据存储）

5.二叉还是有点慢，能不能更快点，降低树的高度，N叉树    有个不便点，插入可能会移动已经放好的数据，所以最好是有序递增的

6.ES中的索引：
  倒排索引怎么存放呢，放在一个词典树上，这类似于mysql的b树，在ES中叫term dictionary
  词典树的查询复杂度是O(n) , 但缺点是对内存需求大
  FST技术解决了这件事:
    trie: 字典树 也叫前缀数 只共享了前缀
    FST:Finite State Transducer 有限状态转换器  即共享了term的前缀 又共享了term的后缀  
      前缀树可以保证每个页子节点是按唯一顺序到来的，所以可以直接存放该词的倒排KV value，
      FST怎么在最后的状态输出不同顺序的value呢，它可以在每次移动的时候做加减，比如 ho lo最终状态都是o，但是你可以在0->h的移动中+1,0->l的移动中+2,这样ho 就对应了 1，lo就对应了2
    FSA:Finite State Acceptor   有限状态接收器
  
  
  
